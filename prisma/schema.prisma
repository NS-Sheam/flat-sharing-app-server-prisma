// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  userName  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(MEMBER)
  member    Member?
  admin     Admin?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Member {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  name      String
  email     String    @unique
  mobileNo  String
  address   String?
  flat      Flat[]
  request   Request[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("members")
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  email     String   @unique
  mobileNo  String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Flat {
  id          String    @id @default(uuid())
  location    String
  description String
  rent        Int
  bedrooms    Int
  amenities   String[]
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  memberId    String
  member      Member    @relation(fields: [memberId], references: [id])
  request     Request[]

  @@map("flats")
}

model Request {
  id             String   @id @default(uuid())
  status         Status   @default(PENDING)
  additionalInfo String?
  memberId       String
  member         Member   @relation(fields: [memberId], references: [id])
  flatId         String
  flat           Flat     @relation(fields: [flatId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("requests")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  MEMBER
}
